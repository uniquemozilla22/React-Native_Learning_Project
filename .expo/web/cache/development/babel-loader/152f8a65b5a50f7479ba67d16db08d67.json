{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\unique\\\\Desktop\\\\reactnative\\\\React Native Course Application\\\\src\\\\screens\\\\colorSquareScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useReducer } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ColorCounter from \"../Component/ColorCounter\";\n\nvar reducer = function reducer(state, action) {\n  var sum = state.red + action.amount;\n\n  switch (action.colorToChange) {\n    case 'red':\n      {\n        return sum >= 256 || sum < 0 ? state : _objectSpread(_objectSpread({}, state), {}, {\n          red: sum\n        });\n      }\n\n    case 'green':\n      {\n        return sum >= 256 || sum < 0 ? state : _objectSpread(_objectSpread({}, state), {}, {\n          green: sum\n        });\n      }\n\n    case 'blue':\n      {\n        return sum >= 256 || sum < 0 ? state : _objectSpread(_objectSpread({}, state), {}, {\n          blue: sum\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nvar colorSquareScreen = function colorSquareScreen() {\n  var _useReducer = useReducer(reducer, {\n    red: 0,\n    green: 0,\n    blue: 0\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var red = state.red,\n      green = state.green,\n      blue = state.blue;\n\n  var _useState = useState(50),\n      _useState2 = _slicedToArray(_useState, 2),\n      Color_increment = _useState2[0],\n      setColor_increment = _useState2[1];\n\n  var Color = \"rgb(\" + red + \",\" + green + \",\" + blue + \")\";\n  return React.createElement(React.Fragment, null, React.createElement(TextInput, {\n    onChange: function onChange(e) {\n      return setColor_increment(e.target.value);\n    },\n    style: styles.textInput,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }), React.createElement(ColorCounter, {\n    color: \"red\",\n    functionToAdd: function functionToAdd() {\n      return dispatch({\n        colorToChange: \"red\",\n        amount: Color_increment\n      });\n    },\n    functionToDeduct: function functionToDeduct() {\n      return dispatch({\n        colorToChange: \"red\",\n        amount: -1 * Color_increment\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), React.createElement(ColorCounter, {\n    color: \"green\",\n    functionToAdd: function functionToAdd() {\n      return dispatch({\n        colorToChange: \"green\",\n        amount: Color_increment\n      });\n    },\n    functionToDeduct: function functionToDeduct() {\n      return dispatch({\n        colorToChange: \"green\",\n        amount: -1 * Color_increment\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), React.createElement(ColorCounter, {\n    color: \"blue\",\n    functionToAdd: function functionToAdd() {\n      return dispatch({\n        colorToChange: \"blue\",\n        amount: Color_increment\n      });\n    },\n    functionToDeduct: function functionToDeduct() {\n      return dispatch({\n        colorToChange: \"blue\",\n        amount: -1 * Color_increment\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: {\n      height: 100,\n      width: \"100%\",\n      backgroundColor: Color,\n      paddingHorizontal: \"35%\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, Color)));\n};\n\nvar styles = StyleSheet.create({\n  textInput: {\n    color: 'black',\n    backgroundColor: 'white'\n  }\n});\nexport default colorSquareScreen;","map":{"version":3,"sources":["C:/Users/unique/Desktop/reactnative/React Native Course Application/src/screens/colorSquareScreen.js"],"names":["React","useState","useReducer","ColorCounter","reducer","state","action","sum","red","amount","colorToChange","green","blue","colorSquareScreen","dispatch","Color_increment","setColor_increment","Color","e","target","value","styles","textInput","height","width","backgroundColor","paddingHorizontal","StyleSheet","create","color"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,UAAvB,QAAuC,OAAvC;;;;;;AAEA,OAAOC,YAAP;;AAGA,IAAMC,OAAO,GAAE,SAATA,OAAS,CAACC,KAAD,EAAOC,MAAP,EAAgB;AAC3B,MAAIC,GAAG,GAAGF,KAAK,CAACG,GAAN,GAAYF,MAAM,CAACG,MAA7B;;AACA,UAAOH,MAAM,CAACI,aAAd;AACI,SAAK,KAAL;AAAW;AAEP,eAAOH,GAAG,IAAE,GAAL,IAAUA,GAAG,GAAC,CAAd,GAAmBF,KAAnB,mCAA+BA,KAA/B;AAAsCG,UAAAA,GAAG,EAACD;AAA1C,UAAP;AACH;;AACD,SAAK,OAAL;AAAa;AACT,eAAOA,GAAG,IAAE,GAAL,IAAUA,GAAG,GAAC,CAAd,GAAmBF,KAAnB,mCAA+BA,KAA/B;AAAsCM,UAAAA,KAAK,EAACJ;AAA5C,UAAP;AAEH;;AACD,SAAK,MAAL;AAAY;AACR,eAAOA,GAAG,IAAE,GAAL,IAAUA,GAAG,GAAC,CAAd,GAAmBF,KAAnB,mCAA+BA,KAA/B;AAAsCO,UAAAA,IAAI,EAACL;AAA3C,UAAP;AAEH;;AACD;AACI,aAAOF,KAAP;AAdR;AAgBH,CAlBD;;AAqBA,IAAMQ,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAAA,oBACLX,UAAU,CAACE,OAAD,EAAS;AAACI,IAAAA,GAAG,EAAC,CAAL;AAAOG,IAAAA,KAAK,EAAC,CAAb;AAAeC,IAAAA,IAAI,EAAC;AAApB,GAAT,CADL;AAAA;AAAA,MACrBP,KADqB;AAAA,MACfS,QADe;;AAAA,MAErBN,GAFqB,GAEJH,KAFI,CAErBG,GAFqB;AAAA,MAEhBG,KAFgB,GAEJN,KAFI,CAEhBM,KAFgB;AAAA,MAEVC,IAFU,GAEJP,KAFI,CAEVO,IAFU;;AAAA,kBAGiBX,QAAQ,CAAC,EAAD,CAHzB;AAAA;AAAA,MAGrBc,eAHqB;AAAA,MAGLC,kBAHK;;AAQ5B,MAAMC,KAAK,YAAQT,GAAR,SAAeG,KAAf,SAAwBC,IAAxB,MAAX;AAEA,SACI,0CACA,oBAAC,SAAD;AAAW,IAAA,QAAQ,EAAE,kBAACM,CAAD;AAAA,aAAKF,kBAAkB,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAvB;AAAA,KAArB;AAA8D,IAAA,KAAK,EAAEC,MAAM,CAACC,SAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAEA,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAC,KAApB;AAA0B,IAAA,aAAa,EAAE;AAAA,aAAKR,QAAQ,CAAC;AAACJ,QAAAA,aAAa,EAAC,KAAf;AAAuBD,QAAAA,MAAM,EAACM;AAA9B,OAAD,CAAb;AAAA,KAAzC;AAAwG,IAAA,gBAAgB,EAAE;AAAA,aAAKD,QAAQ,CAAC;AAACJ,QAAAA,aAAa,EAAC,KAAf;AAAuBD,QAAAA,MAAM,EAAC,CAAC,CAAD,GAAKM;AAAnC,OAAD,CAAb;AAAA,KAA1H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,EAGA,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAC,OAApB;AAA4B,IAAA,aAAa,EAAE;AAAA,aAAKD,QAAQ,CAAC;AAACJ,QAAAA,aAAa,EAAC,OAAf;AAAyBD,QAAAA,MAAM,EAACM;AAAhC,OAAD,CAAb;AAAA,KAA3C;AAA4G,IAAA,gBAAgB,EAAE;AAAA,aAAKD,QAAQ,CAAC;AAACJ,QAAAA,aAAa,EAAC,OAAf;AAAyBD,QAAAA,MAAM,EAAC,CAAC,CAAD,GAAKM;AAArC,OAAD,CAAb;AAAA,KAA9H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHA,EAIA,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAC,MAApB;AAA2B,IAAA,aAAa,EAAE;AAAA,aAAKD,QAAQ,CAAC;AAACJ,QAAAA,aAAa,EAAC,MAAf;AAAwBD,QAAAA,MAAM,EAACM;AAA/B,OAAD,CAAb;AAAA,KAA1C;AAA0G,IAAA,gBAAgB,EAAE;AAAA,aAAKD,QAAQ,CAAC;AAACJ,QAAAA,aAAa,EAAC,MAAf;AAAwBD,QAAAA,MAAM,EAAC,CAAC,CAAD,GAAKM;AAApC,OAAD,CAAb;AAAA,KAA5H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJA,EAKA,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACQ,MAAAA,MAAM,EAAC,GAAR;AAAYC,MAAAA,KAAK,EAAC,MAAlB;AAAyBC,MAAAA,eAAe,EAACR,KAAzC;AAA+CS,MAAAA,iBAAiB,EAAC;AAAjE,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOT,KAAP,CADJ,CALA,CADJ;AAWH,CArBD;;AAuBA,IAAMI,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAE7BN,EAAAA,SAAS,EAAC;AACNO,IAAAA,KAAK,EAAC,OADA;AAENJ,IAAAA,eAAe,EAAC;AAFV;AAFmB,CAAlB,CAAf;AASA,eAAeZ,iBAAf","sourcesContent":["import React,{useState,useReducer}from 'react'\r\nimport {View, StyleSheet,Text,TextInput, TouchableOpacity} from 'react-native'\r\nimport ColorCounter from '../Component/ColorCounter'\r\n\r\n\r\nconst reducer =(state,action)=>{\r\n    let sum = state.red + action.amount\r\n    switch(action.colorToChange){\r\n        case 'red':{\r\n            \r\n            return sum>=256||sum<0 ?  state : {...state, red:sum}\r\n        }\r\n        case 'green':{\r\n            return sum>=256||sum<0 ?  state : {...state, green:sum}\r\n\r\n        }\r\n        case 'blue':{\r\n            return sum>=256||sum<0 ?  state : {...state, blue:sum}\r\n\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nconst colorSquareScreen = () => { \r\n    const [state,dispatch]=useReducer(reducer,{red:0,green:0,blue:0})\r\n    const {red, green,blue}=state\r\n    const [Color_increment,setColor_increment] = useState(50)\r\n\r\n\r\n\r\n \r\n    const Color=`rgb(${red},${green},${blue})` \r\n    \r\n    return (\r\n        <>\r\n        <TextInput onChange={(e)=>setColor_increment(e.target.value)} style={styles.textInput}/>\r\n        <ColorCounter color='red' functionToAdd={()=> dispatch({colorToChange:\"red\" , amount:Color_increment})} functionToDeduct={()=> dispatch({colorToChange:\"red\" , amount:-1 * Color_increment})}/>\r\n        <ColorCounter color='green' functionToAdd={()=> dispatch({colorToChange:\"green\" , amount:Color_increment})} functionToDeduct={()=> dispatch({colorToChange:\"green\" , amount:-1 * Color_increment})}/>\r\n        <ColorCounter color='blue' functionToAdd={()=> dispatch({colorToChange:\"blue\" , amount:Color_increment})} functionToDeduct={()=> dispatch({colorToChange:\"blue\" , amount:-1 * Color_increment})}/>        \r\n        <View style={{height:100,width:\"100%\",backgroundColor:Color,paddingHorizontal:\"35%\"}}>\r\n            <Text>{Color}</Text>\r\n        </View>\r\n        </>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    \r\n    textInput:{\r\n        color:'black',\r\n        backgroundColor:'white'\r\n    },\r\n    \r\n})\r\n\r\nexport default colorSquareScreen\r\n"]},"metadata":{},"sourceType":"module"}