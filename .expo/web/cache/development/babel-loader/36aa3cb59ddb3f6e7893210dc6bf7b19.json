{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\unique\\\\Desktop\\\\reactnative\\\\React Native Course Application\\\\src\\\\screens\\\\colorSquareScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useReducer } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ColorCounter from \"../Component/ColorCounter\";\n\nvar reducer = function reducer(state, action) {\n  var sum_red = state.red + action.payload;\n  var sum_green = state.green + action.payload;\n  var sum_blue = state.blue + action.payload;\n\n  switch (action.type) {\n    case \"change_red\":\n      {\n        return sum_red >= 256 || sum_red < 0 ? state : _objectSpread(_objectSpread({}, state), {}, {\n          red: sum_red\n        });\n      }\n\n    case \"change_green\":\n      {\n        return sum_green >= 256 || sum_green < 0 ? state : _objectSpread(_objectSpread({}, state), {}, {\n          green: sum_green\n        });\n      }\n\n    case \"change_blue\":\n      {\n        return sum_blue >= 256 || sum_blue < 0 ? state : _objectSpread(_objectSpread({}, state), {}, {\n          blue: sum_blue\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nvar colorSquareScreen = function colorSquareScreen() {\n  var _useReducer = useReducer(reducer, {\n    red: 0,\n    green: 0,\n    blue: 0\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var red = state.red,\n      green = state.green,\n      blue = state.blue;\n\n  var _useState = useState(50),\n      _useState2 = _slicedToArray(_useState, 2),\n      Color_increment = _useState2[0],\n      setColor_increment = _useState2[1];\n\n  var Color = \"rgb(\" + red + \",\" + green + \",\" + blue + \")\";\n  return React.createElement(React.Fragment, null, React.createElement(TextInput, {\n    onChange: function onChange(e) {\n      return setColor_increment(e.target.value);\n    },\n    style: styles.textInput,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }), React.createElement(ColorCounter, {\n    color: \"red\",\n    functionToAdd: function functionToAdd() {\n      return dispatch({\n        type: \"change_red\",\n        payload: Color_increment\n      });\n    },\n    functionToDeduct: function functionToDeduct() {\n      return dispatch({\n        type: \"change_red\",\n        payload: -1 * Color_increment\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), React.createElement(ColorCounter, {\n    color: \"green\",\n    functionToAdd: function functionToAdd() {\n      return dispatch({\n        type: \"change_green\",\n        payload: Color_increment\n      });\n    },\n    functionToDeduct: function functionToDeduct() {\n      return dispatch({\n        type: \"change_green\",\n        payload: -1 * Color_increment\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), React.createElement(ColorCounter, {\n    color: \"blue\",\n    functionToAdd: function functionToAdd() {\n      return dispatch({\n        type: \"change_blue\",\n        payload: Color_increment\n      });\n    },\n    functionToDeduct: function functionToDeduct() {\n      return dispatch({\n        type: \"change_blue\",\n        payload: -1 * Color_increment\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: {\n      height: 100,\n      width: \"100%\",\n      backgroundColor: Color,\n      paddingHorizontal: \"35%\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, Color)));\n};\n\nvar styles = StyleSheet.create({\n  textInput: {\n    color: \"black\",\n    backgroundColor: \"white\"\n  }\n});\nexport default colorSquareScreen;","map":{"version":3,"sources":["C:/Users/unique/Desktop/reactnative/React Native Course Application/src/screens/colorSquareScreen.js"],"names":["React","useState","useReducer","ColorCounter","reducer","state","action","sum_red","red","payload","sum_green","green","sum_blue","blue","type","colorSquareScreen","dispatch","Color_increment","setColor_increment","Color","e","target","value","styles","textInput","height","width","backgroundColor","paddingHorizontal","StyleSheet","create","color"],"mappings":"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","sourcesContent":["import React, { useState, useReducer } from \"react\";\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\nimport ColorCounter from \"../Component/ColorCounter\";\r\n\r\nconst reducer = (state, action) => {\r\n  let sum_red = state.red + action.payload;\r\n  let sum_green = state.green + action.payload;\r\n  let sum_blue = state.blue + action.payload;\r\n  switch (action.type) {\r\n    case \"change_red\": {\r\n      return sum_red >= 256 || sum_red < 0 ? state : { ...state, red: sum_red };\r\n    }\r\n    case \"change_green\": {\r\n      return sum_green >= 256 || sum_green < 0\r\n        ? state\r\n        : { ...state, green: sum_green };\r\n    }\r\n    case \"change_blue\": {\r\n      return sum_blue >= 256 || sum_blue < 0\r\n        ? state\r\n        : { ...state, blue: sum_blue };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst colorSquareScreen = () => {\r\n  const [state, dispatch] = useReducer(reducer, { red: 0, green: 0, blue: 0 });\r\n  const { red, green, blue } = state;\r\n  const [Color_increment, setColor_increment] = useState(50);\r\n\r\n  const Color = `rgb(${red},${green},${blue})`;\r\n\r\n  return (\r\n    <>\r\n      <TextInput\r\n        onChange={(e) => setColor_increment(e.target.value)}\r\n        style={styles.textInput}\r\n      />\r\n      <ColorCounter\r\n        color=\"red\"\r\n        functionToAdd={() =>\r\n          dispatch({ type: \"change_red\", payload: Color_increment })\r\n        }\r\n        functionToDeduct={() =>\r\n          dispatch({ type: \"change_red\", payload: -1 * Color_increment })\r\n        }\r\n      />\r\n      <ColorCounter\r\n        color=\"green\"\r\n        functionToAdd={() =>\r\n          dispatch({ type: \"change_green\", payload: Color_increment })\r\n        }\r\n        functionToDeduct={() =>\r\n          dispatch({ type: \"change_green\", payload: -1 * Color_increment })\r\n        }\r\n      />\r\n      <ColorCounter\r\n        color=\"blue\"\r\n        functionToAdd={() =>\r\n          dispatch({ type: \"change_blue\", payload: Color_increment })\r\n        }\r\n        functionToDeduct={() =>\r\n          dispatch({ type: \"change_blue\", payload: -1 * Color_increment })\r\n        }\r\n      />\r\n      <View\r\n        style={{\r\n          height: 100,\r\n          width: \"100%\",\r\n          backgroundColor: Color,\r\n          paddingHorizontal: \"35%\",\r\n        }}\r\n      >\r\n        <Text>{Color}</Text>\r\n      </View>\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  textInput: {\r\n    color: \"black\",\r\n    backgroundColor: \"white\",\r\n  },\r\n});\r\n\r\nexport default colorSquareScreen;\r\n"]},"metadata":{},"sourceType":"module"}